{
  "alias": "chat",
  "name": "chatroom",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "timeseries",
    "sizeX": 8,
    "sizeY": 5,
    "resources": [],
    "templateHtml": "<div class=\"container\">\r\n\r\n    <div class=\"chat-list\">\r\n        <div *ngFor=\"let chat of chatlist\" class=\"chat-item\">\r\n          <div><mat-icon mat-list-icon>chat</mat-icon>{{chat.nick}}<small> - {{chat.ts | date:'yyyy-MM-dd HH:mm:ss'}} </small></div>\r\n          <div class=\"chat-msg\">{{chat.content}}</div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"footer\">\r\n        <input matInput [(ngModel)]=\"content\" (keyup)=\"onKeyUp($event)\">\r\n        <button mat-button color=\"primary\" style=\"flex:60px\" (click)=\"sendMsg()\">发送</button>\r\n    </div>\r\n</div>",
    "templateCss": ".container {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: auto;\n}\n\n.chat-list {\n    width: 100%;\n    flex: 100%;\n    overflow: scroll;\n}\n\n.chat-item {\n    padding: 2px 8px;\n    margin-bottom: 5px;\n    width: 100%;\n}\n\n.chat-msg{\n    margin: 2px 16px;\n    padding: 4px 16px 8px;\n    background-color: blue;\n    color: white;\n    font-size: 15px;\n    border-radius: 5px;\n}\n\n.footer {\n    width: 100%;\n    flex: 60px;\n    display: flex;\n}\n\n.footer input {\n    border:2px solid blue; \n    flex:100%;\n    margin:5px; \n    padding: 0px 10px;\n    font-size:15px;\n}\n\n.footer button {\n    border:2px solid grey;\n    margin: 5px;\n}\n",
    "controllerScript": "/****************************************************************************\n * \n * Usage: Specify any device for the dashboard data source, and specify \n * the telemetry name as \"chat\".\n * \n * 用法：仪表板数据源只需要任意一设备，遥测名称为“chat”\n * \n * 最新值和Timeseries部件的区别\n * 1 最新值data.data是最新数据，Timeserie是多个历史数据\n * 2 Timeseries data时间窗不要选聚合功能，否则数据会聚合\n * \n * \n * \n * 用最新值部件设计聊天群：\n * 1 onInit事件：初始化一个空的聊天记录\n * 2 onDataUpdated事件：最新聊天数据添加到聊天记录，需转化对象\n * 3 界面按聊天记录显示，\n * 4 往设备发送遥测数据(聊天信息)\n * 特点：进入聊天室看不到最近的聊天信息\n * \n * 用Timeseries部件设计聊天群：\n * 1 onDataUpdated事件：把所有json字符串转换成json对象\n * 2 界面按转换后的数据显示\n * 3 往设备发送遥测数据(聊天信息)\n * 特点：可以查看历史记录，进入聊天室可以看到最近的聊天信息\n * \n * Timeseries聊天部件设计优化\n * 1 onDataUpdated事件每次要重新整理全部数据，页面的文字都无法保持\n * 2 用Ojbect.keys快速定位数据，但ngFor好像不支持 let in, 只好同时建立数组和对象\n * \n * 最新值部件聊天问题\n * 1 页面没激活时，中间没数据过来！\n * \n * ************************************************************************/\n\nself.onInit = function() {\n    console.log(self);\n    self.ctx.$scope.content = \"\";\n    // 用于ngFor枚举对象keys\n    self.ctx.$scope.chatlist = [];\n    self.ctx.$scope.chatHelp = {};\n    self.ctx.$scope.sendMsg = function () {\n        if (self.ctx.datasources.length > 0 && self.ctx.$scope.content.trim().length > 0 & self.ctx.$scope.content.trim().length < 200) {\n                let entityId = self.ctx.datasources[0].entity.id.id;\n                self.ctx.http.post(`api/plugins/telemetry/DEVICE/${entityId}/timeseries/ANY`, \n                {\n                    chat: {\n                        userId: self.ctx.currentUser.userId,\n                        nick: self.ctx.currentUser.firstName + self.ctx.currentUser.lastName,\n                        content: self.ctx.$scope.content\n                    }\n                },\n                {\n                    'headers': {\n                        'content-type': 'application/json',\n                        'X-Authorization': 'bearer ' + localStorage.getItem('jwt_token')\n                    }\n                }).subscribe(() => {\n                    self.ctx.$scope.content = \"\";\n                });\n            }\n    };\n    self.ctx.$scope.onKeyUp = function(event) {\n        // console.log(event);\n        if (event.which === 13 && event.shiftKey) {\n            self.ctx.$scope.sendMsg();\n        }\n    }\n}\n\nself.onDataUpdated = function() {\n    // console.log(self.ctx);\n    let updated = false;\n    if (self.ctx.data.length > 0 && self.ctx.data[0].data.length > 0) {\n        for(let data of self.ctx.data[0].data) {\n            let content = data[1];\n            if ((typeof content == \"string\") && content[0] == \"{\" && content[content.length-1] == \"}\") {\n                content = JSON.parse(content);\n                let key = data[0].toString() + '-' + content.userId;\n                // self.ctx.$scope.chatlist.push([data[0], msg]);\n                if (!self.ctx.$scope.chatHelp[key]) {\n                    content.ts = data[0];\n                    self.ctx.$scope.chatlist.push(content);\n                    self.ctx.$scope.chatHelp[key] = content;\n                    //console.log('add chat', content);\n                    updated = true;\n                }\n            }\n        }\n        //console.log('chat timeseries', self.ctx.$scope.chatlist);\n        self.ctx.detectChanges();\n        if (updated) {\n            // 等页面更新才能定位到底部\n            setTimeout(function() {\n                $('.chat-list')[0].scrollTop = $('.chat-list')[0].scrollHeight;\n            }, 10);\n        }\n    }\n}\n\nself.onResize = function() {\n    console.log('resize', self.ctx);\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1,\n        minDataKeys: 1\n    };\n};\n\nself.onDestroy = function() {\n}",
    "settingsSchema": "{}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"shadowSize\":4,\"fontColor\":\"#545454\",\"fontSize\":10,\"xaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"showLabels\":true,\"color\":\"#545454\"},\"grid\":{\"color\":\"#545454\",\"tickColor\":\"#DDDDDD\",\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1},\"legend\":{\"show\":true,\"position\":\"nw\",\"backgroundColor\":\"#f0f0f0\",\"backgroundOpacity\":0.85,\"labelBoxBorderColor\":\"rgba(1, 1, 1, 0.45)\"},\"decimals\":1,\"stack\":false,\"tooltipIndividual\":false},\"title\":\"chatroom\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
  }
}